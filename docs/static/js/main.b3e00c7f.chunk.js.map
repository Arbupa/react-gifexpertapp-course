{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/CategoriesCollection.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","oldCategories","type","value","onChange","event","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","gif","id","title","images","downsized_medium","GifGridItem","className","src","alt","CategoriesCollection","loading","loadingState","setloadingState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6LA+BeA,EA3BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACE,sBAAMC,SAZa,SAACC,GAGpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAoBP,GAApB,mBAAmCO,OACjDN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAjBhB,SAACC,GACzBV,EAAcU,EAAMC,OAAOH,a,+BCVlBI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,yFACyEC,UAC5FH,GAFmB,sBAIEI,MAAMF,GAJR,cAIfG,EAJe,gBAKEA,EAASC,OALX,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAcdM,GAdc,4CAAH,sDCaLO,EAXK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAG5B,OACE,sBAAKc,UAAU,4BAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCgBKO,EApBc,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAC9B,ECD0B,SAACA,GAC3B,MAAwCf,mBAAS,CAC/CsB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAqBC,EAArB,KAiBA,OAZAC,qBAAU,WAERxB,EAAQC,GAELwB,MAAK,SAACC,GACLH,EAAgB,CACdf,KAAMkB,EACNL,SAAS,SAGd,CAACpB,IAEGqB,EDjB2BK,CAAa1B,GAAjCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,uBAAd,SAAsChB,IACrCoB,GACC,mBAAGJ,UAAU,mCAAb,wBAEF,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACkB,GAAD,OAEV,aADA,CACC,EAAD,eAA8BA,GAAZA,EAAIhB,aEYjBiB,EAxBM,WACnB,MAAoC3C,mBAAS,CAAC,WAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAQA,OACE,qCACE,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG6C,EAAWpB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAqCA,SAAUA,GAApBA,Y,MChBrC8B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.b3e00c7f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  // función para cambiar el estado del valor ingresado\r\n  // dentro del input (o sea, el evento)\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    // para prevenir el comportamiendo por defecto del formulario\r\n    // y evitar que se refresque la página cada vez que se da enter.\r\n    e.preventDefault();\r\n    // si borrando los espacios, el texto es mayor a 2, se agrega\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((oldCategories) => [inputValue, ...oldCategories]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddCategory;\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `http://api.giphy.com/v1/gifs/search?api_key=bokmAMfWv2KcOJV4eJcL5GIkSPCaG3MW&q=${encodeURI(\r\n    category\r\n  )}&limit=10`;\r\n  const response = await fetch(url);\r\n  const { data } = await response.json();\r\n  const gifs = data.map((gif) => {\r\n    return {\r\n      id: gif.id,\r\n      title: gif.title,\r\n      url: gif.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  // regresa una promesa que resuelve la colección de imágenes.\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n  //console.log({ title, url });\r\n  //return <div>{img.title}</div>;\r\n  return (\r\n    <div className=\"card animate__fadeInUpBig\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nconst CategoriesCollection = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__fadeInUpBig\">{category}</h3>\r\n      {loading && (\r\n        <p className=\"animate__animated animate__flash\">Loading...</p>\r\n      )}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          // send all the img properties\r\n          <GifGridItem key={img.id} {...img} />\r\n          //return <li key={id}>{title}</li>;\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CategoriesCollection;\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n// custom hook\r\nexport const useFetchGifs = (category) => {\r\n  const [loadingState, setloadingState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // fetch gifs from api\r\n    getGifs(category)\r\n      // passes the promise's return to upload the data\r\n      .then((imgs) => {\r\n        setloadingState({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n      });\r\n  }, [category]);\r\n\r\n  return loadingState; //{data:[], loading: true}\r\n};\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./AddCategory\";\r\nimport CategoriesCollection from \"./CategoriesCollection\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"Naruto\"]);\r\n\r\n  // const handleAdd = () => {\r\n  //   // setCategories([...categories, \"HunterXHunter\"]);\r\n  //   // setCategories regresa un callback del estado anterior\r\n  //   // y después de la flecha son los nuevos valores del estado.\r\n  //   setCategories((categs) => [...categories, \"HunterXHunter\"]);\r\n  // };\r\n  return (\r\n    <>\r\n      <h2>Gif Expert App</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <CategoriesCollection key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./components/GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}